/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* relativeSortArray(int* arr1, int arr1Size, int* arr2, int arr2Size, int* returnSize){
    int i, j, pos;    
    int *ans = NULL;
    int *map  = NULL;
    int Max = 0;

    ans = malloc(arr1Size * sizeof(int));
    memset(ans, 0, arr1Size * sizeof(int));

    map = malloc(1001 * sizeof(int));
    memset(map, 0, 1001 * sizeof(int)); 


    for (i = 0; i < arr1Size; i++) {
        if (Max < arr1[i]) {
            Max = arr1[i];
        }
        map[arr1[i]] = map[arr1[i]] + 1;
    }

    pos = 0;
    for (i = 0; i < arr2Size; i++) {
        int num = map[arr2[i]];
        while (num > 0) {
            ans[pos] = arr2[i];
            ++pos;
            --num;
        }
        map[arr2[i]] = 0;
    }

    for (i = 0; i <= Max; i++) {
        int num = map[i];
        if (num == 0) {
            continue;
        }

        while (num > 0) {
            ans[pos] = i;
            ++pos;
            --num;
        }
    }

    *returnSize = arr1Size;
    return ans;

}