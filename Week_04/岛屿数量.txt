class Solution {
private:
    void dfsSearch(vector<vector<char>>& grid, int r, int c) {
        int row = grid.size(); 
        int col = grid[0].size();

        grid[r][c] = '0';

        if ((r-1>=0) && (grid[r-1][c])=='1') dfsSearch(grid, r-1, c);
        if ((c-1>=0) && (grid[r][c-1])=='1') dfsSearch(grid, r, c-1);
        if ((r+1<row) && (grid[r+1][c])=='1') dfsSearch(grid, r+1, c);
        if ((c+1<col) && (grid[r][c+1])=='1') dfsSearch(grid, r, c+1);
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int row = grid.size();
        int islandNum = 0;
        int col;
        if (row==0) return 0;
        col = grid[0].size();

        for (int r=0; r<row; r++) {
            for (int c=0; c<col; c++) {
                 if (grid[r][c] == '1') {
                      islandNum++; 
                      dfsSearch(grid, r, c); 
                 }   
            }
        }
        return islandNum;
    }
};