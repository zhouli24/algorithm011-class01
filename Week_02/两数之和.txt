1、暴力法，两层循环，计算每2个数之和，直到与目标值相等位为止。
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    int *ret = NULL;
    int i,j;

    ret = malloc(sizeof(int) * 2);
    ret[0] = 0;
    ret[1] = 0;
    if (nums==NULL || numsSize==0 || returnSize==NULL)
    {
        return ret;
    }
    *returnSize=0;
    for (i=0; i<numsSize; i++) 
    {
        for (j=i+1; j<numsSize; j++)
        {
            if ((nums[i] + nums[j]) == target)
            {
                ret[0] = i;
                ret[1] = j;
                *returnSize = 2;
                return ret;
            }
        }
    }
    return ret;
}

时间复杂度：O(n^2)




用hashmap，2次遍历的方法：

要加个if (i ==  hash.get(target-nums[i]))判断，否则会出现两个相同索引问题

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> hash = new HashMap<>();
        int[] ret = new int[2];

        for (int i=0; i<nums.length; ++i) {
            hash.put(nums[i], i);
        }

        for (int i=0; i<nums.length; ++i) {
            if (hash.containsKey(target-nums[i])) {
                if (i ==  hash.get(target-nums[i])) {
                    continue;
                }
                ret[0] = i;
                ret[1] = hash.get(target-nums[i]);
                break;
            }
        }

        return ret;

    }
}
时间复杂度：O(2n)






用hashmap，1次遍历的方法:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> hash = new HashMap<>();
        int[] ret = new int[2];

        for (int i=0; i<nums.length; ++i) {
            if (hash.containsKey(target-nums[i])) {
                ret[0] = hash.get(target-nums[i]);
                ret[1] = i;
                break;
            }
            hash.put(nums[i], i);
        }

        return ret;
    }
}
时间复杂度：O(n)
